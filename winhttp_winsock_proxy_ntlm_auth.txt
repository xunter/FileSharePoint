// Win32Project1.cpp : Defines the entry point for the application.
//

#include "stdafx.h"
#include <string.h>
#include <winsock2.h>
#include <windows.h>
#include <iostream>
#include <vector>
#include <locale>
#include <sstream>
#include <fstream>
#include <cstring>
//#include <atlstr.h> 
#include "Winhttp.h"
#include <thread>
#include <mutex>
using namespace std;
#pragma comment(lib,"ws2_32.lib")


string website_HTML;
locale local;
void get_Website(string url );
char buffer[10000];
int i = 0 ;

#include "Win32Project1.h"

#define MAX_LOADSTRING 100

BOOL GetProxyUrl()
{
	
	WINHTTP_CURRENT_USER_IE_PROXY_CONFIG ieProxyConfig;
	ieProxyConfig.fAutoDetect = NULL;
	ieProxyConfig.lpszAutoConfigUrl = NULL;

	if (WinHttpGetIEProxyConfigForCurrentUser(&ieProxyConfig))
	{

	}

	WINHTTP_AUTOPROXY_OPTIONS autoProxyOptions;
	autoProxyOptions.dwFlags = WINHTTP_AUTOPROXY_AUTO_DETECT;
	autoProxyOptions.dwAutoDetectFlags = WINHTTP_AUTO_DETECT_TYPE_DHCP | WINHTTP_AUTO_DETECT_TYPE_DNS_A;
	autoProxyOptions.dwReserved = NULL;
	autoProxyOptions.lpvReserved = NULL;
	autoProxyOptions.fAutoLogonIfChallenged = TRUE;

	if (ieProxyConfig.lpszAutoConfigUrl != NULL)
	{

		//autoProxyOptions.lpszAutoConfigUrl = ieProxyConfig.lpszAutoConfigUrl;
	}

	WINHTTP_PROXY_INFO proxyInfo;

	HINTERNET hInet = WinHttpOpen(_T(""), WINHTTP_ACCESS_TYPE_NO_PROXY, 0, 0, 0);
	if (WinHttpGetProxyForUrl(hInet, _T("http://microsoft.com"), &autoProxyOptions, &proxyInfo))
	{

	}

	WinHttpCloseHandle(hInet);

	return TRUE;
}


BYTE hook[6];
BYTE hook2[6];
BYTE jmp[6] = { 0xe9,0x00, 0x00, 0x00, 0x00 ,0xc3 };  
//ofstream myfile;
//ofstream myfile2;
DWORD pPrevious;
std::mutex muSockSend;
std::mutex muSockRecv;


DWORD HookFunction(LPCTSTR lpModule, LPCSTR lpFuncName, LPVOID lpFunction, unsigned char *lpBackup)
{  
      DWORD dwAddr = (DWORD)GetProcAddress(GetModuleHandle(lpModule), lpFuncName);
      ReadProcessMemory(GetCurrentProcess(), (LPVOID)dwAddr, lpBackup, 6, 0);
      DWORD dwCalc = ((DWORD)lpFunction - dwAddr - 5);
      VirtualProtect((void*) dwAddr, 6, PAGE_EXECUTE_READWRITE, &pPrevious);
      memcpy(&jmp[1], &dwCalc, 4);
      WriteProcessMemory(GetCurrentProcess(), (LPVOID)dwAddr, jmp, 6, 0);
      VirtualProtect((void*) dwAddr, 6, pPrevious, &pPrevious);
      FlushInstructionCache(GetCurrentProcess(),0,0);
      return dwAddr;
}    

BOOL UnHookFunction(LPCTSTR lpModule, LPCSTR lpFuncName, unsigned char *lpBackup)
{
DWORD dwAddr = (DWORD)GetProcAddress(GetModuleHandle(lpModule), lpFuncName);

if (WriteProcessMemory(GetCurrentProcess(), (LPVOID)dwAddr, lpBackup, 6, 0))
        return TRUE;
        FlushInstructionCache(GetCurrentProcess(),0,0);

return FALSE;  
}

int __stdcall nSend(SOCKET s, const char *buf, int len,int flags){
UnHookFunction(_T("ws2_32.dll"), "send", hook);
	//std::lock_guard<std::mutex> lock(muSockSend);

string str = buf;
string sHeaders = str.substr(0, str.find("\r\n\r\n") - 2);
string sContents = str.substr(str.find("\r\n\r\n") + 4);

sHeaders += "Proxy-Authorization: ";
sHeaders += "NTLM slkdjflksjdlfkjslkdfj";
sHeaders += "\r\n";


str.clear();

str.append(sHeaders);
str.append("\r\n");
str.append(sContents);


int result = send(s,str.c_str(),str.length,flags);


  //myfile.open (_T("C:\\tmp\\log.txt"),ios::app | ios::binary);
  //myfile << buf;
  //myfile.close();


	time_t now;
    time(&now);
    char bufTime[sizeof "2011-10-08-07-07-09"] = "2011-10-08-07-07-09";
    strftime(bufTime, sizeof bufTime, "%Y-%m-%d_%H-%M-%S", gmtime(&now));
    // this will work too, if your compiler doesn't support %F or %T:
    //strftime(buf, sizeof buf, "%Y-%m-%dT%H:%M:%SZ", gmtime(&now));
    //std::cout << buf << "\n";

	char bufSocketPointer[sizeof &s];
	_itoa(s, bufSocketPointer, 16);
	string sFilePath = "C:\\trash\\winsock\\";
	sFilePath.append(bufTime);
	sFilePath.append("_sock_");
	sFilePath.append(bufSocketPointer);
	sFilePath.append("_send.log");

		ofstream myfile;
		myfile.open (sFilePath.c_str(),ios::app | ios::binary);
        myfile << buf;
        myfile.close();




HookFunction(_T("ws2_32.dll"), "send", (LPVOID*) nSend, hook);
return result;
} 

int __stdcall nRecv(SOCKET s, char* buf, int len, int flags)
{
    UnHookFunction(_T("ws2_32.dll"), "recv", hook2);
	//std::lock_guard<std::mutex> lock(muSockRecv);
    DWORD tmp;

    len = recv(s, buf, len, flags);

	time_t now;
    time(&now);
    char bufTime[sizeof "2011-10-08_07-07-09"];
    strftime(bufTime, sizeof bufTime, "%Y-%m-%d_%H-%M-%S", gmtime(&now));
    // this will work too, if your compiler doesn't support %F or %T:
    //strftime(buf, sizeof buf, "%Y-%m-%dT%H:%M:%SZ", gmtime(&now));
    //std
    //if (len > 0)
    //{
		char *pBuf = strstr(buf, " ");
		pBuf++;
		char bufStatus[4];
		strncpy_s(bufStatus, pBuf, 3);
		bufStatus[3] = '\0';
		int httpStatusCode = atoi(bufStatus);

		if (httpStatusCode == 407)
		{
			//return len;
		}

    //}

		
	char bufSocketPointer[sizeof &s];
	_itoa(s, bufSocketPointer, 16);
	string sFilePath = "C:\\trash\\winsock\\";
	sFilePath.append(bufTime);
	sFilePath.append("_sock_");
	sFilePath.append(bufSocketPointer);
	sFilePath.append("_recv.log");

		ofstream myfile;
		myfile.open (sFilePath.c_str(),ios::app | ios::binary);
        myfile << buf;
        myfile.close();
   HookFunction(_T("ws2_32.dll"), "recv", (LPVOID*) nRecv, hook2);
    return len;
}

VOID WinHttpAsyncCallback(HINTERNET hInternet,
  DWORD_PTR dwContext,
  DWORD     dwInternetStatus,
  LPVOID    lpvStatusInformation,
  DWORD     dwStatusInformationLength)
{
  BOOL  bResults = FALSE;
    DWORD dwSize = 0;
	//PTCHAR str = (PTCHAR)hInternet;
	
	return;
	switch (dwInternetStatus) {
	case WINHTTP_CALLBACK_STATUS_REQUEST_SENT:
		{
			
	HINTERNET hRequest = (HINTERNET)hInternet;
			WinHttpQueryHeaders( hRequest, WINHTTP_QUERY_RAW_HEADERS_CRLF,
								 WINHTTP_HEADER_NAME_BY_INDEX, NULL,
								 &dwSize, WINHTTP_NO_HEADER_INDEX);

			// Allocate memory for the buffer.
			if( GetLastError( ) == ERROR_INSUFFICIENT_BUFFER )
			{
			
				PTCHAR lpOutBuffer = NULL;
				lpOutBuffer = new TCHAR[dwSize/sizeof(TCHAR)];

				// Now, use WinHttpQueryHeaders to retrieve the header.
				bResults = WinHttpQueryHeaders( hRequest,
										   WINHTTP_QUERY_RAW_HEADERS_CRLF,
										   WINHTTP_HEADER_NAME_BY_INDEX,
										   lpOutBuffer, &dwSize,
										   WINHTTP_NO_HEADER_INDEX);

				// Print the header contents.
				if (bResults)
					printf("Header contents: \n%S",lpOutBuffer);

				// Free the allocated memory.
				delete [] lpOutBuffer;
			}
		}
		break;
	}

}



void DoWinHttpRequest(TCHAR *webUrl)
{
	wstring sResourcePath = _T("/");
	wstring sFullUrl = webUrl;
	wstring sServerName = webUrl;
	wstring sScheme = _T("http:");
	BOOL isDefaultPort = true;
	wstring sPort = _T("");

	
	bool isHttps = sServerName.find(_T("https:")) == 0;
	sScheme = isHttps ? _T("https:") : _T("http:");
	
	if (sServerName.find(_T("http")) == 0 && sServerName.find(_T("//")) != -1) {
		sServerName = sServerName.substr(sScheme.length() + 2);
	}

	int pathIndex = sServerName.find('/');
	if (pathIndex != -1)
	{
		sResourcePath = sServerName.substr(pathIndex);
		sServerName = sServerName.substr(0, pathIndex);
	}

	

	if (sServerName.find(_T(":")) != -1) {
		sPort = sServerName.substr(sServerName.find(_T(":")) + 1);
		isDefaultPort = false;
	}
	
	int portNum = isDefaultPort ? (isHttps ? INTERNET_DEFAULT_HTTPS_PORT : INTERNET_DEFAULT_HTTP_PORT) : _wtoi(sPort.c_str());

	DWORD dwSize = 0;
  DWORD dwDownloaded = 0;
  LPSTR pszOutBuffer;
  BOOL  bResults = TRUE;
  HINTERNET  hSession = NULL, 
             hConnect = NULL,
             hRequest = NULL;

  // Use WinHttpOpen to obtain a session handle.
  hSession = WinHttpOpen( L"WinHTTP Example/1.0",  
                          WINHTTP_ACCESS_TYPE_DEFAULT_PROXY,
                          WINHTTP_NO_PROXY_NAME, 
                          WINHTTP_NO_PROXY_BYPASS, 0 );

  
	// Install the status callback function.
  /*
											   */

  /*
  WINHTTP_PROXY_INFO proxy = { 0 };
    proxy.dwAccessType = WINHTTP_ACCESS_TYPE_NAMED_PROXY;
    proxy.lpszProxy = L"http://obn-ha.homecredit.ru:8080";
    if (!WinHttpSetOption(hSession, WINHTTP_OPTION_PROXY, &proxy, sizeof(proxy)))
    {
        wprintf(L"Unable to set proxy.\n");
    }
	*/


  // Specify an HTTP server.
  if( hSession )
	  hConnect = WinHttpConnect( hSession, sServerName.c_str(), portNum, 0 );

  // Create an HTTP request handle.
  if( hConnect )
	  hRequest = WinHttpOpenRequest( hConnect, L"GET", sResourcePath.c_str(),
                                   NULL, WINHTTP_NO_REFERER, 
                                   WINHTTP_DEFAULT_ACCEPT_TYPES, 
                                   isHttps ? WINHTTP_FLAG_SECURE : NULL );

  /*
        WINHTTP_STATUS_CALLBACK isCallback = WinHttpSetStatusCallback( hRequest,
                                               (WINHTTP_STATUS_CALLBACK)WinHttpAsyncCallback,
                                               WINHTTP_CALLBACK_FLAG_ALL_NOTIFICATIONS, 
                                               NULL);
											   */
  

  //WinHttpQueryAuthParams
  WinHttpSetOption(hSession, WINHTTP_OPTION_CONTEXT_VALUE, &hRequest, sizeof HINTERNET);

  // Send a request.
  if( hRequest )
    bResults = WinHttpSendRequest( hRequest,
                                   WINHTTP_NO_ADDITIONAL_HEADERS, 0,
                                   WINHTTP_NO_REQUEST_DATA, 0, 
                                   0, 0 );

  

  // End the request.
  if( bResults )
    bResults = WinHttpReceiveResponse( hRequest, NULL );
  
  
  /*
  DWORD dwBufHeadersLen = 0;
  PTCHAR lpBufHeaders = NULL;

  bResults = WinHttpQueryHeaders(hRequest, WINHTTP_QUERY_RAW_HEADERS_CRLF, WINHTTP_HEADER_NAME_BY_INDEX, NULL, &dwBufHeadersLen, WINHTTP_NO_HEADER_INDEX);
  lpBufHeaders = new TCHAR[dwBufHeadersLen];
  bResults = WinHttpQueryHeaders(hRequest, WINHTTP_QUERY_RAW_HEADERS_CRLF, WINHTTP_HEADER_NAME_BY_INDEX, NULL, &dwBufHeadersLen, WINHTTP_NO_HEADER_INDEX);


  bResults = WinHttpQueryHeaders(hRequest, WINHTTP_QUERY_PROXY_AUTHENTICATE, 0, lpBufHeaders, &dwBufHeadersLen, 0);
  bResults = WinHttpQueryHeaders(hRequest, WINHTTP_QUERY_WWW_AUTHENTICATE, 0, lpBufHeaders, &dwBufHeadersLen, 0);
  bResults = WinHttpQueryHeaders(hRequest, WINHTTP_QUERY_AUTHORIZATION, 0, lpBufHeaders, &dwBufHeadersLen, 0);
  bResults = WinHttpQueryHeaders(hRequest, WINHTTP_QUERY_USER_AGENT, 0, lpBufHeaders, &dwBufHeadersLen, 0);
  */

  
    //DWORD dwSize = 0;
    PTCHAR lpOutBuffer = NULL;
  
    // First, use WinHttpQueryHeaders to obtain the size of the buffer.
    if (bResults)
    {
        WinHttpQueryHeaders( hRequest, 
			WINHTTP_QUERY_FLAG_REQUEST_HEADERS | WINHTTP_QUERY_RAW_HEADERS_CRLF,
                             WINHTTP_HEADER_NAME_BY_INDEX, NULL,
                             &dwSize, WINHTTP_NO_HEADER_INDEX);

        // Allocate memory for the buffer.
        if( GetLastError( ) == ERROR_INSUFFICIENT_BUFFER )
        {
			
            lpOutBuffer = new TCHAR[dwSize/sizeof(TCHAR)];

            // Now, use WinHttpQueryHeaders to retrieve the header.
            bResults = WinHttpQueryHeaders( hRequest,
										WINHTTP_QUERY_FLAG_REQUEST_HEADERS | WINHTTP_QUERY_RAW_HEADERS_CRLF,
                                       WINHTTP_HEADER_NAME_BY_INDEX,
                                       lpOutBuffer, &dwSize,
                                       WINHTTP_NO_HEADER_INDEX);
        }
    }

    // Print the header contents.
    if (bResults)
        printf("Header contents: \n%S",lpOutBuffer);

    // Free the allocated memory.
    delete [] lpOutBuffer;

  // Keep checking for data until there is nothing left.
  if( bResults )
  {
    do 
    {
      // Check for available data.
      dwSize = 0;
      if( !WinHttpQueryDataAvailable( hRequest, &dwSize ) )
        printf( "Error %u in WinHttpQueryDataAvailable.\n",
                GetLastError( ) );

      // Allocate space for the buffer.
      pszOutBuffer = new char[dwSize+1];
      if( !pszOutBuffer )
      {
        printf( "Out of memory\n" );
        dwSize=0;
      }
      else
      {
        // Read the data.
        ZeroMemory( pszOutBuffer, dwSize+1 );

        if( !WinHttpReadData( hRequest, (LPVOID)pszOutBuffer, 
                              dwSize, &dwDownloaded ) )
          printf( "Error %u in WinHttpReadData.\n", GetLastError( ) );
        else
          printf( "%s", pszOutBuffer );

        // Free the memory allocated to the buffer.
        delete [] pszOutBuffer;
      }
    } while( dwSize > 0 );
  }


  // Report any errors.
  if( !bResults )
    printf( "Error %d has occurred.\n", GetLastError( ) );

  // Close any open handles.
  if( hRequest ) WinHttpCloseHandle( hRequest );
  if( hConnect ) WinHttpCloseHandle( hConnect );
  if( hSession ) WinHttpCloseHandle( hSession );
}

// Global Variables:
HINSTANCE hInst;								// current instance
TCHAR szTitle[MAX_LOADSTRING];					// The title bar text
TCHAR szWindowClass[MAX_LOADSTRING];			// the main window class name

// Forward declarations of functions included in this code module:
ATOM				MyRegisterClass(HINSTANCE hInstance);
BOOL				InitInstance(HINSTANCE, int);
LRESULT CALLBACK	WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK	About(HWND, UINT, WPARAM, LPARAM);

int APIENTRY _tWinMain(_In_ HINSTANCE hInstance,
                     _In_opt_ HINSTANCE hPrevInstance,
                     _In_ LPTSTR    lpCmdLine,
                     _In_ int       nCmdShow)
{
	HookFunction(_T("ws2_32.dll"), "send", (LPVOID*) nSend, hook);
HookFunction(_T("ws2_32.dll"), "recv", (LPVOID*) nRecv, hook2);

	UNREFERENCED_PARAMETER(hPrevInstance);
	UNREFERENCED_PARAMETER(lpCmdLine);

 	// TODO: Place code here.
	MSG msg;
	HACCEL hAccelTable;

	// Initialize global strings
	LoadString(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
	LoadString(hInstance, IDC_WIN32PROJECT1, szWindowClass, MAX_LOADSTRING);
	MyRegisterClass(hInstance);

	// Perform application initialization:
	if (!InitInstance (hInstance, nCmdShow))
	{
		return FALSE;
	}

	hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_WIN32PROJECT1));

	GetProxyUrl();
	get_Website("www.microsoft.com" );
	//DoWinHttpRequest(_T("http://remedy.homecredit.ru/arsys/forms/os-1395/SHR%3ALandingConsole/Default+Administrator+View/"));
	DoWinHttpRequest(_T("http://docflow/DocsVision"));

    cout<<website_HTML;

    cout<<"\n\nPress ANY key to close.\n\n";
    cin.ignore(); cin.get(); 

	// Main message loop:
	while (GetMessage(&msg, NULL, 0, 0))
	{
		if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
	}

	return (int) msg.wParam;
}


 //****************************************************

void get_Website(string url ){
    WSADATA wsaData;
    SOCKET Socket;
    SOCKADDR_IN SockAddr;
    int lineCount=0;
    int rowCount=0;
    struct hostent *host;
    string get_http;
	
    get_http = "GET / HTTP/1.1\r\nHost: " + url + "\r\nConnection: close\r\nUser-Agent: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\r\n\r\n";

    if (WSAStartup(MAKEWORD(2,2), &wsaData) != 0){
        cout << "WSAStartup failed.\n";
        system("pause");
        //return 1;
    }
	
    Socket=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);
	string proxyHost = "obn-ha.homecredit.ru";

    host = gethostbyname(proxyHost.c_str());

    SockAddr.sin_port=htons(8080);
    SockAddr.sin_family=AF_INET;
    SockAddr.sin_addr.s_addr = *((unsigned long*)host->h_addr);

    if(connect(Socket,(SOCKADDR*)(&SockAddr),sizeof(SockAddr)) != 0){
        cout << "Could not connect";
        system("pause");
        //return 1;
    }
    send(Socket,get_http.c_str(), strlen(get_http.c_str()),0 );

    int nDataLength;
    while ((nDataLength = recv(Socket,buffer,10000,0)) > 0){        
        int i = 0;
        while (buffer[i] >= 32 || buffer[i] == '\n' || buffer[i] == '\r'){

            website_HTML+=buffer[i];
            i += 1;
        }               
    }

    closesocket(Socket);
    WSACleanup();

}



//
//  FUNCTION: MyRegisterClass()
//
//  PURPOSE: Registers the window class.
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
	WNDCLASSEX wcex;

	wcex.cbSize = sizeof(WNDCLASSEX);

	wcex.style			= CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc	= WndProc;
	wcex.cbClsExtra		= 0;
	wcex.cbWndExtra		= 0;
	wcex.hInstance		= hInstance;
	wcex.hIcon			= LoadIcon(hInstance, MAKEINTRESOURCE(IDI_WIN32PROJECT1));
	wcex.hCursor		= LoadCursor(NULL, IDC_ARROW);
	wcex.hbrBackground	= (HBRUSH)(COLOR_WINDOW+1);
	wcex.lpszMenuName	= MAKEINTRESOURCE(IDC_WIN32PROJECT1);
	wcex.lpszClassName	= szWindowClass;
	wcex.hIconSm		= LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

	return RegisterClassEx(&wcex);
}

//
//   FUNCTION: InitInstance(HINSTANCE, int)
//
//   PURPOSE: Saves instance handle and creates main window
//
//   COMMENTS:
//
//        In this function, we save the instance handle in a global variable and
//        create and display the main program window.
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{


   HWND hWnd;

   hInst = hInstance; // Store instance handle in our global variable

   hWnd = CreateWindow(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
      CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, NULL, NULL, hInstance, NULL);

   if (!hWnd)
   {
      return FALSE;
   }

   ShowWindow(hWnd, nCmdShow);
   UpdateWindow(hWnd);

   return TRUE;
}

//
//  FUNCTION: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  PURPOSE:  Processes messages for the main window.
//
//  WM_COMMAND	- process the application menu
//  WM_PAINT	- Paint the main window
//  WM_DESTROY	- post a quit message and return
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	int wmId, wmEvent;
	PAINTSTRUCT ps;
	HDC hdc;

	switch (message)
	{
	case WM_COMMAND:
		wmId    = LOWORD(wParam);
		wmEvent = HIWORD(wParam);
		// Parse the menu selections:
		switch (wmId)
		{
		case IDM_ABOUT:
			DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
			break;
		case IDM_EXIT:
			DestroyWindow(hWnd);
			break;
		default:
			return DefWindowProc(hWnd, message, wParam, lParam);
		}
		break;
	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);
		// TODO: Add any drawing code here...
		EndPaint(hWnd, &ps);
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
	}
	return 0;
}

// Message handler for about box.
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
	UNREFERENCED_PARAMETER(lParam);
	switch (message)
	{
	case WM_INITDIALOG:
		return (INT_PTR)TRUE;

	case WM_COMMAND:
		if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
		{
			EndDialog(hDlg, LOWORD(wParam));
			return (INT_PTR)TRUE;
		}
		break;
	}
	return (INT_PTR)FALSE;
}
